'use client';

import { useState, useEffect } from 'react';
import StarBackground from '@/components/explore/StarBackground';
import StaticCosmicBackground from '@/components/market/StaticCosmicBackground';
import AmbientParticles from '@/components/market/AmbientParticles';
import SimpleFloatingElements from '@/components/market/SimpleFloatingElements';
import StaticUI from '@/components/market/StaticUI';
import { useLineFriends } from '@/hooks/useLineFriends';
import { leaderboardService, LeaderboardRankingEntry, LeaderboardRankingsResponse } from '@/services/leaderboardService';
import { nftService, NFTCollectionResponse } from '@/services/nftService';

export default function HomePage({ profile }) {
  const [activeRankingTab, setActiveRankingTab] = useState<'global' | 'friends'>('global');
  const [activeRankingType, setActiveRankingType] = useState<'explorations' | 'planets'>('explorations');
  const [showInviteSuccessModal, setShowInviteSuccessModal] = useState(false);
  const [showNFTModal, setShowNFTModal] = useState(false);
  const [selectedNFT, setSelectedNFT] = useState<any>(null);
  const [showNFTShareSuccessModal, setShowNFTShareSuccessModal] = useState(false); // NFT ÏûêÎûë ÏÑ±Í≥µ Î™®Îã¨
  const [leaderboardData, setLeaderboardData] = useState<LeaderboardRankingsResponse | null>(null);
  const [isLoadingRanking, setIsLoadingRanking] = useState(true);
  const [rankingError, setRankingError] = useState<string | null>(null);
  const [nftCollection, setNftCollection] = useState<NFTCollectionResponse | null>(null);
  const [isLoadingNFT, setIsLoadingNFT] = useState(false);
  
  // const { walletAddress } = useWallet(); // ÏßÄÍ∞ë Ï£ºÏÜå Í∞ÄÏ†∏Ïò§Í∏∞
  
  const { 
    inviteFriends,        // ÏπúÍµ¨ Ï¥àÎåÄ Ìï®Ïàò
    shareNFTToFriends,    // NFT ÏûêÎûëÌïòÍ∏∞ Ìï®Ïàò
    isLoadingFriends      // Î°úÎî© ÏÉÅÌÉú
  } = useLineFriends(); 

  console.log('Ïó¨Í∏∞Îäî home/page');

  // NFT ÌñâÏÑ±Î≥Ñ Îç∞Ïù¥ÌÑ∞
  const nftData = {
    moon: {
      name: 'Îã¨',
      emoji: 'üåô',
      image: '/images/hoshitanuNFT/moon-hoshitanu.png',
      externalImage: 'https://kaia-baytamins.github.io/planetNFT-metadata/hoshitanu/moon-hoshitanu.png',
      rarity: 'Í∏∞Î≥∏ NFT',
      story: 'Ï≤òÏùåÏúºÎ°ú Îã¨Ïóê Î∞úÏùÑ ÎîõÏóàÏùÑ ÎïåÏùò Í∏∞Î∂ÑÏùÄ... ÏôÄ! Ï†ïÎßê ÎåÄÎã®ÌñàÏñ¥! ÏßÄÍµ¨ÏóêÏÑú Î≥¥Îçò Í≤ÉÍ≥ºÎäî ÏôÑÏ†ÑÌûà Îã¨ÎûêÏñ¥. Í≥†ÏöîÌïú ÌÅ¨Î†àÏù¥ÌÑ∞Îì§Í≥º ÏùÄÎπõ Î®ºÏßÄÍ∞Ä Î∞òÏßùÏù¥Îäî Î™®ÏäµÏù¥ ÎÑàÎ¨¥ ÏïÑÎ¶ÑÎã§Ïõ†Ïñ¥. Ïó¨Í∏∞ÏÑú Ïö∞Ï£º ÌÉêÌóòÏùò Ï≤´ Í±∏ÏùåÏùÑ ÏãúÏûëÌñàÎã§Îäî Í≤å Ï†ïÎßê ÎøåÎìØÌï¥!'
    },
    mars: {
      name: 'ÌôîÏÑ±',
      emoji: 'üî¥',
      image: '/images/hoshitanuNFT/mars-hoshitanu.png',
      externalImage: 'https://kaia-baytamins.github.io/planetNFT-metadata/hoshitanu/mars-hoshitanu.png',
      rarity: 'Í∏∞Î≥∏ NFT',
      story: 'ÌôîÏÑ±Ïùò Î∂âÏùÄ ÏÇ¨ÎßâÏóêÏÑú Î™®ÎûòÌè≠ÌíçÏùÑ ÎßåÎÇ¨ÏùÑ ÎïåÎäî Ï†ïÎßê Î¨¥ÏÑúÏõ†Ïñ¥! ÌïòÏßÄÎßå Ìè≠ÌíçÏù¥ ÏßÄÎÇòÍ∞ÄÍ≥† ÎÇòÏÑú Î≥∏ ÌôîÏÑ±Ïùò ÏùºÎ™∞ÏùÄ... ÎÑàÎ¨¥ÎÑàÎ¨¥ ÏïÑÎ¶ÑÎã§ÏõåÏÑú ÎààÎ¨ºÏù¥ ÎÇ† ÎªîÌñàÏñ¥. ÏßÄÍµ¨ÏôÄÎäî Îã§Î•∏ ÌååÎûÄÏÉâ ÏùºÎ™∞Ïù¥ Ï†ïÎßê Ïã†ÎπÑÎ°úÏõ†Ïñ¥!'
    },
    titan: {
      name: 'ÌÉÄÏù¥ÌÉÑ',
      emoji: 'üåä',
      image: '/images/hoshitanuNFT/titan-hoshitanu.png',
      externalImage: 'https://kaia-baytamins.github.io/planetNFT-metadata/hoshitanu/titan-hoshitanu.png',
      rarity: 'Í∏∞Î≥∏ NFT',
      story: 'ÌÉÄÏù¥ÌÉÑÏùò Î©îÌÉÑ Î∞îÎã§ÏóêÏÑú ÏàòÏòÅ(?)ÏùÑ Ìï¥Î¥§Ïñ¥! Î¨ºÎ°† Ïö∞Ï£ºÎ≥µÏùÑ ÏûÖÍ≥† ÎßêÏù¥Ïïº „Öé„Öé. Ïò§Î†åÏßÄÏÉâ ÌïòÎäò ÏïÑÎûò ÌéºÏ≥êÏßÑ Ïï°Ï≤¥ Î©îÌÉÑ Ìò∏ÏàòÎäî Ï†ïÎßê ÌôòÏÉÅÏ†ÅÏù¥ÏóàÏñ¥. ÏßÄÍµ¨Ïùò Î∞îÎã§ÏôÄÎäî ÏôÑÏ†ÑÌûà Îã§Î•∏ ÎäêÎÇåÏù¥ÏóàÏßÄÎßå Í∑∏ÎßåÌÅº Ïã†Í∏∞ÌïòÍ≥† Ïû¨Î∞åÏóàÏñ¥!'
    },
    europa: {
      name: 'Ïú†Î°úÌåå',
      emoji: 'üíß',
      image: '/images/hoshitanuNFT/europa-hoshitanu.png',
      externalImage: 'https://kaia-baytamins.github.io/planetNFT-metadata/hoshitanu/europa-hoshitanu.png',
      rarity: 'Í∏∞Î≥∏ NFT',
      story: 'Ïú†Î°úÌååÏùò ÏñºÏùå ÌëúÎ©¥ÏùÑ Îö´Í≥† ÏßÄÌïò Î∞îÎã§Î•º ÌÉêÌóòÌñàÏùÑ Îïå... Ï†ïÎßê ÏßúÎ¶øÌñàÏñ¥! ÎëêÍ∫ºÏö¥ ÏñºÏùå ÏïÑÎûò Ïà®Í≤®ÏßÑ Í±∞ÎåÄÌïú Î∞îÎã§ÏóêÏÑú Ïã†ÎπÑÎ°úÏö¥ ÏÉùÎ™ÖÏ≤¥Îì§ÏùÑ Î∞úÍ≤¨Ìï† Ïàò ÏûàÏùÑ Í≤É Í∞ôÏùÄ Í∏∞Î∂ÑÏù¥ÏóàÏñ¥. ÎØ∏ÏßÄÏùò ÏÑ∏Í≥ÑÎ•º ÌÉêÌóòÌïòÎäî Í∏∞Î∂ÑÏù¥ Ïù¥Îü∞ Í±∞Íµ¨ÎÇò!'
    },
    saturn: {
      name: 'ÌÜ†ÏÑ±',
      emoji: 'üåÄ',
      image: '/images/hoshitanuNFT/saturn-hoshitanu.png',
      externalImage: 'https://kaia-baytamins.github.io/planetNFT-metadata/hoshitanu/saturn-hoshitanu.png',
      rarity: 'Ìù¨Í∑Ä NFT',
      story: 'ÌÜ†ÏÑ±Ïùò Í≥†Î¶¨ ÏÇ¨Ïù¥Î•º ÎÇ†ÏïÑÎã§ÎÖîÏùÑ ÎïåÏùò Í∑∏ ÏßúÎ¶øÌï®! Î¨¥ÏàòÌïú ÏñºÏùåÍ≥º Îèå Ï°∞Í∞ÅÎì§ ÏÇ¨Ïù¥Î•º Ïä§Î•¥Î•µ ÏßÄÎÇòÍ∞ÄÎäî Í∏∞Î∂ÑÏùÄ... ÎßàÏπò Ïö∞Ï£ºÏùò Î°§Îü¨ÏΩîÏä§ÌÑ∞Î•º ÌÉÄÎäî Í≤É Í∞ôÏïòÏñ¥! ÏïÑÎ¶ÑÎãµÍ≥† ÏúÑÌóòÌïòÏßÄÎßå Í∑∏ÎßåÌÅº Ïä§Î¶¥ ÎÑòÏπòÎäî Î™®ÌóòÏù¥ÏóàÏñ¥!'
    }
  };

  const fetchLeaderboardData = async () => {
    try {
      setIsLoadingRanking(true);
      setRankingError(null);
      
      const data = await leaderboardService.getRankings();
      setLeaderboardData(data);
      
      // Îπà Îç∞Ïù¥ÌÑ∞Ïùº Îïå Î°úÍ∑∏
      if (!data.totalExplorations?.length && !data.successfulExplorations?.length) {
        console.log('‚ö†Ô∏è API returned empty leaderboard data');
      }
    } catch (error) {
      console.error('Failed to fetch leaderboard:', error);
      setRankingError('Î¶¨ÎçîÎ≥¥ÎìúÎ•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§');
    } finally {
      setIsLoadingRanking(false);
    }
  };

  const fetchNFTCollection = async () => {
    // ÌÖåÏä§Ìä∏Ïö© ÌïòÎìúÏΩîÎî©Îêú Ï£ºÏÜå ÏÇ¨Ïö©
    const testAddress = '0x1234567890123456789012345678901234567890';
    
    try {
      setIsLoadingNFT(true);
      console.log('üöÄ Fetching NFT collection for TEST ADDRESS:', testAddress);
      
      const data = await nftService.getUserNFTCollection(testAddress);
      setNftCollection(data);
      console.log('üì¶ NFT Collection data:', data);
      console.log('üìä Total Explorations:', data.totalExplorations);
      console.log('üåç Conquered Planets:', data.conqueredPlanets);
      console.log('üéÆ Owned NFTs:', data.ownedNFTs);
    } catch (error) {
      console.error('Failed to fetch NFT collection:', error);
    } finally {
      setIsLoadingNFT(false);
    }
  };

  // Î¶¨ÎçîÎ≥¥Îìú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    fetchLeaderboardData();
  }, []);

  // NFT Ïª¨Î†âÏÖò Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ (ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Î∞îÎ°ú ÌÖåÏä§Ìä∏)
  useEffect(() => {
    fetchNFTCollection(); // ÌÖåÏä§Ìä∏Ïö© ÌïòÎìúÏΩîÎî© Ï£ºÏÜåÎ°ú Î∞îÎ°ú Ìò∏Ï∂ú
  }, []);

  // Í∏ÄÎ°úÎ≤å Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞ (ÌÉêÌóò ÌöüÏàò)
  const globalExplorationsRanking = [
    { rank: 1, name: 'Kana12', value: 100, avatar: 'üöÄ', isMe: false },
    { rank: 2, name: 'StarLord88', value: 85, avatar: '‚≠ê', isMe: false },
    { rank: 3, name: 'ÎÇò', value: 67, avatar: 'üõ∏', isMe: true },
    { rank: 4, name: 'CosmicRay', value: 54, avatar: 'üåå', isMe: false },
    { rank: 5, name: 'GalaxyWalker', value: 43, avatar: 'üåü', isMe: false },
    { rank: 6, name: 'RedPlanet99', value: 38, avatar: 'üî¥', isMe: false },
    { rank: 7, name: 'MoonExplorer', value: 29, avatar: 'üåô', isMe: false },
  ];

  // Í∏ÄÎ°úÎ≤å Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞ (ÌÉêÌóòÌïú ÌñâÏÑ±)
  const globalPlanetRanking = [
    { rank: 1, name: 'PlanetMaster', value: 15, avatar: 'üåç', isMe: false },
    { rank: 2, name: 'Kana12', value: 12, avatar: 'üöÄ', isMe: false },
    { rank: 3, name: 'GalaxyHunter', value: 10, avatar: 'üåå', isMe: false },
    { rank: 4, name: 'StarLord88', value: 8, avatar: '‚≠ê', isMe: false },
    { rank: 5, name: 'ÎÇò', value: 5, avatar: 'üõ∏', isMe: true },
    { rank: 6, name: 'CosmicRay', value: 4, avatar: 'üåü', isMe: false },
    { rank: 7, name: 'MoonExplorer', value: 3, avatar: 'üåô', isMe: false },
  ];


  // ÏπúÍµ¨ Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞ (ÌÉêÌóò ÌöüÏàò)
  const friendsExplorationsRanking = [
    { rank: 1, name: 'Ïù¥Ïú§Ìòï', value: 85, avatar: 'üë®', isMe: false, org: 'LINE ÏπúÍµ¨' },
    { rank: 2, name: 'ÎÇò', value: 67, avatar: 'üõ∏', isMe: true, org: 'CosmicExplorer' },
    { rank: 3, name: 'ÏµúÏòàÏä¨', value: 54, avatar: 'üë©', isMe: false, org: 'LINE ÏπúÍµ¨' },
    { rank: 4, name: 'Ìô©Ï§ÄÌïò', value: 43, avatar: 'üë±', isMe: false, org: 'LINE ÏπúÍµ¨' },
  ];

  // ÏπúÍµ¨ Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞ (ÌÉêÌóòÌïú ÌñâÏÑ±)
  const friendsPlanetRanking = [
    { rank: 1, name: 'Ìô©Ï§ÄÌïò', value: 8, avatar: 'üë®', isMe: false, org: 'LINE ÏπúÍµ¨' },
    { rank: 2, name: 'ÏµúÏòàÏä¨', value: 6, avatar: 'üë©', isMe: false, org: 'LINE ÏπúÍµ¨' },
    { rank: 3, name: 'ÎÇò', value: 5, avatar: 'üõ∏', isMe: true, org: 'CosmicExplorer' },
    { rank: 4, name: 'Ïù¥Ïú§Ìòï', value: 2, avatar: 'üë±', isMe: false, org: 'LINE ÏπúÍµ¨' },
  ];


  // ÏπúÍµ¨ Î¶¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ (Ïã§Ï†úÎ°úÎäî Î∞±ÏóîÎìú APIÏóêÏÑú Í∞ÄÏ†∏Ïò¨ ÏòàÏ†ï)
  const friends = [
    { 
      id: 1, 
      name: profile?.displayName || 'ÍπÄÏ≤†Ïàò', // LIFF ÌîÑÎ°úÌïÑÏóêÏÑú Í∞ÄÏ†∏Ïò® Ïù¥Î¶Ñ ÏÇ¨Ïö©
      status: 'active', 
      description: 'Î≥¥ÎùºÏÉâ ¬∑ Ìï≠Í≥µ Ïó∞Íµ¨Ïõê ÏÉÅÍ∏â',
      avatar: 'üë®',
    },
    { 
      id: 2, 
      name: 'Ìô©Ï§ÄÌïò', 
      description: 'Defi Ï¥àÎ≥¥ ¬∑ Í≤åÏûÑ Îü¨Î≤Ñ',
      avatar: 'üë©',
    },
    { 
      id: 3, 
      name: 'Ïù¥Ïú§Ìòï', 
      description: 'Î∏îÎ°ùÏ≤¥Ïù∏ Í≥†Ïàò ¬∑ Ìï¥Ïª§ÌÜ§ Î¨¥Î≤ïÏûê',
      avatar: 'üë±',
    },
    { 
      id: 4, 
      name: 'ÏµúÏòàÏä¨', 
      description: 'Êó•Êú¨‰∫∫ ¬∑ Ïö∞Ï£ºÏôÄ ÎèôÎ¨º Ïï†Ìò∏Í∞Ä',
      avatar: 'üëß',
    },
  ];

  // API Îç∞Ïù¥ÌÑ∞Î•º Í∏∞Ï°¥ ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
  const transformApiDataToRankingFormat = (apiData: LeaderboardRankingEntry[]) => {
    return apiData.map((entry) => ({
      rank: entry.rank,
      name: entry.username,
      value: entry.score,
      avatar: 'üöÄ', // Í∏∞Î≥∏ ÏïÑÎ∞îÌÉÄ, ÎÇòÏ§ëÏóê ÏÇ¨Ïö©Ïûê ÏïÑÎ∞îÌÉÄ Ï†ïÎ≥¥ Ï∂îÍ∞Ä Í∞ÄÎä•
      isMe: false // TODO: ÌòÑÏû¨ ÏÇ¨Ïö©ÏûêÏôÄ ÎπÑÍµêÌï¥ÏÑú ÏÑ§Ï†ï
    }));
  };

  // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Îû≠ÌÇπ Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const getCurrentRanking = () => {
    if (activeRankingTab === 'global') {
      // API Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Í∏∞Î≥∏Í∞í
      if (leaderboardData) {
        switch (activeRankingType) {
          case 'explorations':
            return leaderboardData.totalExplorations ? transformApiDataToRankingFormat(leaderboardData.totalExplorations) : globalExplorationsRanking;
          case 'planets':
            return leaderboardData.successfulExplorations ? transformApiDataToRankingFormat(leaderboardData.successfulExplorations) : globalPlanetRanking;
          default:
            return leaderboardData.totalExplorations ? transformApiDataToRankingFormat(leaderboardData.totalExplorations) : globalExplorationsRanking;
        }
      }
      // Ìè¥Î∞±: Í∏∞Ï°¥ Ï†ïÏ†Å Îç∞Ïù¥ÌÑ∞
      switch (activeRankingType) {
        case 'explorations': return globalExplorationsRanking;
        case 'planets': return globalPlanetRanking;
        default: return globalExplorationsRanking;
      }
    } else {
      // ÏπúÍµ¨ ÌÉ≠ÏùÄ Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©
      switch (activeRankingType) {
        case 'explorations': return friendsExplorationsRanking;
        case 'planets': return friendsPlanetRanking;
        default: return friendsExplorationsRanking;
      }
    }
  };

  // Îû≠ÌÇπ ÌÉÄÏûÖÎ≥Ñ Îã®ÏúÑ Í∞ÄÏ†∏Ïò§Í∏∞
  const getRankingUnit = () => {
    switch (activeRankingType) {
      case 'explorations': return 'ÌöüÏàò';
      case 'planets': return 'ÌñâÏÑ±';
      default: return 'ÌöüÏàò';
    }
  };

  // NFT Ïπ¥Îìú ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
  const handleNFTClick = (nftKey: string) => {
    setSelectedNFT(nftData[nftKey]);
    setShowNFTModal(true);
  };

  // ÏπúÍµ¨ÏóêÍ≤å ÏûêÎûëÌïòÍ∏∞ Ìï∏Îì§Îü¨
  const handleShareNFT = async () => {
    if (!selectedNFT) return;
    
    // Ïú†Ï†ÄÎ™Ö Í∞ÄÏ†∏Ïò§Í∏∞ (LIFF ÌîÑÎ°úÌïÑÏóêÏÑú)
    const userName = profile?.displayName || 'Ïö∞Ï£ºÌÉêÌóòÍ∞Ä';
    
    // ÏÉàÎ°úÏö¥ NFT ÏûêÎûëÌïòÍ∏∞ Ìï®Ïàò ÏÇ¨Ïö© - Ïô∏Î∂Ä Ïù¥ÎØ∏ÏßÄ URL ÏÇ¨Ïö©
    const result = await shareNFTToFriends(
      selectedNFT.name, 
      userName,
      selectedNFT.externalImage, // Ïô∏Î∂Ä URL ÏÇ¨Ïö©
      selectedNFT.story,
      selectedNFT.rarity
    );
    if (result?.success) {
      setShowNFTModal(false);
      setShowNFTShareSuccessModal(true); // NFT ÏûêÎûë ÏÑ±Í≥µ Î™®Îã¨Î°ú Î≥ÄÍ≤Ω
    }
  };

  // ÏπúÍµ¨ Ï¥àÎåÄ Ìï∏Îì§Îü¨
  const handleInviteFriends = async () => {
    const result = await inviteFriends();
    // inviteFriendsÏóêÏÑú ÏÑ±Í≥µ Ïó¨Î∂ÄÎ•º Î∞òÌôòÌïòÎèÑÎ°ù ÏàòÏ†ïÌï¥Ïïº Ìï®
    if (result?.success) {
      setShowInviteSuccessModal(true);
    }
  };

  const currentRanking = getCurrentRanking();

  return (
    <div className="relative min-h-full overflow-hidden">
      {/* Ï†ïÏ†Å Ïö∞Ï£º Î∞∞Í≤Ω ÏãúÏä§ÌÖú */}
      <StarBackground />
      <AmbientParticles />
      <StaticCosmicBackground />
      <SimpleFloatingElements />
      
      {/* ÏπúÍµ¨ Ï¥àÎåÄ ÏÑ±Í≥µ Î™®Îã¨ */}
      {showInviteSuccessModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
          <div className="bg-slate-800 rounded-2xl p-6 m-4 max-w-sm w-full border border-slate-600">
            <div className="text-center">
              <div className="text-6xl mb-4">üéâ</div>
              <h3 className="text-xl font-bold text-white mb-2">
                Ïö∞Ï£º Ïã†Ìò∏ Ï†ÑÏÜ° ÏôÑÎ£å! üõ∏
              </h3>
              <p className="text-gray-300 mb-6">
                ÎèôÎ£å Ïö∞Ï£º ÌÉêÌóòÍ∞ÄÎì§ÏóêÍ≤å<br />
                ÌÉêÌóò Ï¥àÎåÄÏû•ÏùÑ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Î∞úÏÜ°ÌñàÏäµÎãàÎã§!
              </p>
              <button
                onClick={() => setShowInviteSuccessModal(false)}
                className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold py-3 px-6 rounded-xl transition-all"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}

      {/* NFT ÏûêÎûë ÏÑ±Í≥µ Î™®Îã¨ */}
      {showNFTShareSuccessModal && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
          <div className="bg-slate-800 rounded-2xl p-6 m-4 max-w-sm w-full border border-slate-600">
            <div className="text-center">
              <div className="text-6xl mb-4">üåü</div>
              <h3 className="text-xl font-bold text-white mb-2">
                Ïö∞Ï£º Ïã†Ìò∏ Ï†ÑÏÜ° ÏôÑÎ£å! üõ∏
              </h3>
              <p className="text-gray-300 mb-6">
                ÎèôÎ£å Ïö∞Ï£º ÌÉêÌóòÍ∞ÄÎì§ÏóêÍ≤å<br />
                ÎãπÏã†Ïùò ÎÜÄÎùºÏö¥ ÌÉêÌóò Í≤ΩÌóòÏùÑ<br />
                ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÏûêÎûëÌñàÏäµÎãàÎã§!
              </p>
              <button
                onClick={() => setShowNFTShareSuccessModal(false)}
                className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-bold py-3 px-6 rounded-xl transition-all"
              >
                ÌôïÏù∏
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Ï†ïÏ†Å UI Ïª®ÌÖåÏù¥ÎÑà */}
      <div className="relative z-20 p-4 pt-4 space-y-4">
        <StaticUI>
        {/* ÎÇòÏùò Ïö∞Ï£º Ïª¨Î†âÏÖò ÏÑπÏÖò */}
        <div className="bg-slate-800/80 backdrop-blur-sm rounded-2xl p-4 mb-6 border border-slate-700/50">
          <h3 className="text-green-400 font-bold mb-4 flex items-center gap-2">
            üéñÔ∏è ÎÇòÏùò Ïö∞Ï£º Ïª¨Î†âÏÖò
          </h3>
          
          {/* ÌÉêÌóò ÌÜµÍ≥Ñ */}
          <div className="grid grid-cols-2 gap-4 mb-6">
            <div className="bg-gradient-to-br from-blue-600/20 to-purple-600/20 rounded-xl p-3 text-center border border-blue-500/30">
              <div className="text-2xl mb-1">üöÄ</div>
              <div className="font-bold text-white">
                {isLoadingNFT ? '...' : nftCollection?.totalExplorations || 0}
              </div>
              <div className="text-xs text-blue-400">Ï¥ù ÌÉêÌóò ÌöüÏàò</div>
            </div>
            
            <div className="bg-gradient-to-br from-green-600/20 to-emerald-600/20 rounded-xl p-3 text-center border border-green-500/30">
              <div className="text-2xl mb-1">üåç</div>
              <div className="font-bold text-white">
                {isLoadingNFT ? '...' : nftCollection?.conqueredPlanets || 0}
              </div>
              <div className="text-xs text-green-400">Ï†ïÎ≥µÌïú ÌñâÏÑ±</div>
            </div>
          </div>

          {/* ÌöçÎìùÌïú ÌñâÏÑ± NFT Ïπ¥ÎìúÎì§ */}
          <div className="mb-3">
            <h4 className="text-sm font-medium text-gray-300 mb-2">üéÅ ÌöçÎìùÌïú ÌñâÏÑ± NFT</h4>
          </div>
          
          <div className="flex gap-3 overflow-x-auto pb-2" style={{scrollbarWidth: 'none', msOverflowStyle: 'none'}}>
            {isLoadingNFT ? (
              <div className="text-gray-400 text-sm">NFT Î°úÎî© Ï§ë...</div>
            ) : nftCollection && nftCollection.ownedNFTs.length > 0 ? (
              nftCollection.ownedNFTs.map((nft, index) => {
                const planetMapping = {
                  'Îã¨': 'moon',
                  'ÌôîÏÑ±': 'mars', 
                  'ÌÉÄÏù¥ÌÉÑ': 'titan',
                  'Ïú†Î°úÌåå': 'europa',
                  'ÌÜ†ÏÑ±': 'saturn'
                };
                const handleKey = planetMapping[nft.planetInfo.name];
                
                // Í∞Å ÌñâÏÑ±Î≥Ñ Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÏÉâÏÉÅ Îß§Ìïë
                const gradientColors = {
                  'Îã¨': 'from-gray-400/20 to-gray-600/20',
                  'ÌôîÏÑ±': 'from-red-500/20 to-orange-600/20',
                  'ÌÉÄÏù¥ÌÉÑ': 'from-blue-500/20 to-cyan-600/20',
                  'Ïú†Î°úÌåå': 'from-cyan-500/20 to-blue-600/20',
                  'ÌÜ†ÏÑ±': 'from-purple-500/20 to-pink-600/20'
                };
                
                const borderColors = {
                  'Îã¨': 'border-gray-500/30',
                  'ÌôîÏÑ±': 'border-red-500/30',
                  'ÌÉÄÏù¥ÌÉÑ': 'border-blue-500/30',
                  'Ïú†Î°úÌåå': 'border-cyan-500/30',
                  'ÌÜ†ÏÑ±': 'border-purple-500/30'
                };
                
                return (
                  <div 
                    key={index}
                    onClick={() => handleNFTClick(handleKey)}
                    className={`min-w-[120px] bg-gradient-to-br ${gradientColors[nft.planetInfo.name]} rounded-xl p-3 ${borderColors[nft.planetInfo.name]} border flex-shrink-0 cursor-pointer hover:scale-105 transition-transform`}
                  >
                    <div className="text-center">
                      <div className="text-3xl mb-2">{nft.planetInfo.emoji}</div>
                      <div className="text-sm font-bold text-white">{nft.planetInfo.name}</div>
                      <div className="text-xs text-gray-400">{nft.planetInfo.rarity}</div>
                      <div className="text-xs text-yellow-400 mt-1">x{nft.count}</div>
                    </div>
                  </div>
                );
              })
            ) : (
              <div className="text-gray-400 text-sm">ÏïÑÏßÅ ÌöçÎìùÌïú NFTÍ∞Ä ÏóÜÏäµÎãàÎã§</div>
            )}
            
          </div>
        </div>

        {/* ÌÉêÌóò Îû≠ÌÇπ ÏÑπÏÖò */}
        <div className="bg-slate-800/80 backdrop-blur-sm rounded-2xl p-4 mb-6 border border-slate-700/50">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-yellow-400 font-bold flex items-center gap-2">
              üèÜ ÌÉêÌóò Îû≠ÌÇπ
            </h2>
            
            {/* Í∏ÄÎ°úÎ≤å/ÏπúÍµ¨ ÌÉ≠ */}
            <div className="flex bg-slate-700/50 rounded-full p-1 border border-slate-600/30">
              <button
                onClick={() => setActiveRankingTab('global')}
                className={`px-3 py-1 rounded-full text-sm font-medium transition-all ${
                  activeRankingTab === 'global'
                    ? 'bg-purple-600 text-white shadow-lg'
                    : 'text-gray-300 hover:text-white'
                }`}
              >
                Í∏ÄÎ°úÎ≤å
              </button>
              <button
                onClick={() => setActiveRankingTab('friends')}
                className={`px-3 py-1 rounded-full text-sm font-medium transition-all ${
                  activeRankingTab === 'friends'
                    ? 'bg-purple-600 text-white shadow-lg'
                    : 'text-gray-300 hover:text-white'
                }`}
              >
                LINE ÏπúÍµ¨
              </button>
            </div>
          </div>

          {/* Îû≠ÌÇπ ÌÉÄÏûÖ ÏÑ†ÌÉù */}
          <div className="flex bg-slate-700/30 rounded-xl p-1 mb-4 border border-slate-600/30">
            <button
              onClick={() => setActiveRankingType('explorations')}
              className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all ${
                activeRankingType === 'explorations'
                  ? 'bg-blue-600 text-white shadow-lg'
                  : 'text-gray-300 hover:text-white'
              }`}
            >
              ÌÉêÌóò ÌöüÏàò
            </button>
            <button
              onClick={() => setActiveRankingType('planets')}
              className={`flex-1 py-2 px-3 rounded-lg text-sm font-medium transition-all ${
                activeRankingType === 'planets'
                  ? 'bg-blue-600 text-white shadow-lg'
                  : 'text-gray-300 hover:text-white'
              }`}
            >
              ÌÉêÌóò ÌñâÏÑ± Ïàò
            </button>
          </div>

          {/* Îû≠ÌÇπ Î¶¨Ïä§Ìä∏ */}
          <div className="space-y-2">
            {/* Î°úÎî© ÏÉÅÌÉú */}
            {activeRankingTab === 'global' && isLoadingRanking && (
              <div className="flex items-center justify-center py-8">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-yellow-400"></div>
                <span className="ml-3 text-gray-300">Îû≠ÌÇπ Î°úÎî© Ï§ë...</span>
              </div>
            )}

            {/* ÏóêÎü¨ ÏÉÅÌÉú */}
            {activeRankingTab === 'global' && rankingError && (
              <div className="bg-red-500/20 border border-red-500/30 rounded-xl p-4 text-center">
                <div className="text-red-400 text-sm">‚ö†Ô∏è {rankingError}</div>
                <button 
                  onClick={fetchLeaderboardData}
                  className="mt-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm transition-all"
                >
                  Îã§Ïãú ÏãúÎèÑ
                </button>
              </div>
            )}

            {/* Ï†ïÏÉÅ Îç∞Ïù¥ÌÑ∞ ÌëúÏãú */}
            {!(activeRankingTab === 'global' && (isLoadingRanking || rankingError)) && currentRanking.map((user) => (
              <div
                key={user.rank}
                className={`flex items-center gap-3 p-3 rounded-xl transition-all border ${
                  user.isMe
                    ? 'bg-yellow-500/20 border-yellow-500/50 shadow-lg'
                    : 'bg-slate-700/50 hover:bg-slate-700/70 border-slate-600/30'
                }`}
              >
                {/* ÏàúÏúÑ */}
                <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm shadow-lg ${
                  user.rank === 1 ? 'bg-yellow-500 text-black' :
                  user.rank === 2 ? 'bg-gray-400 text-black' :
                  user.rank === 3 ? 'bg-orange-600 text-white' :
                  'bg-slate-600 text-white'
                }`}>
                  {user.rank}
                </div>

                {/* ÏïÑÎ∞îÌÉÄ */}
                <div className="w-10 h-10 bg-slate-600 rounded-full flex items-center justify-center text-lg border border-slate-500/50">
                  {user.avatar}
                </div>

                {/* Ïú†Ï†Ä Ï†ïÎ≥¥ */}
                <div className="flex-1">
                  <div className="font-medium text-white">
                    {user.name}
                    {user.isMe && <span className="text-yellow-400 ml-1">(ÎÇò)</span>}
                  </div>
                  {(user as any).org && (
                    <div className="text-xs text-gray-400">{(user as any).org}</div>
                  )}
                </div>

                {/* Ï†êÏàò/Í∞í */}
                <div className="text-right">
                  <div className="font-bold text-blue-400">{user.value.toLocaleString()}</div>
                  <div className="text-xs text-gray-400">{getRankingUnit()}</div>
                </div>

                {/* Ïï°ÏÖò Î≤ÑÌäº */}
                {!user.isMe && (
                  <button className="text-lg hover:scale-110 transition-transform">üöÄ</button>
                )}
              </div>
            ))}
          </div>
        </div>

        {/* ÏπúÍµ¨ÏôÄ Ìï®Íªò ÏÑπÏÖò */}
        <div className="bg-slate-800/80 backdrop-blur-sm rounded-2xl p-4 border border-slate-700/50">
          <h3 className="text-blue-400 font-bold mb-4 flex items-center gap-2">
            üë• LINE ÏπúÍµ¨ÏôÄ Ìï®Íªò
          </h3>
          
          <div className="space-y-3">
            {/* ÎÇòÏôÄ ÏπúÍµ¨Ïù∏ ÏÇ¨Ïö©ÏûêÎßå ÌëúÏãú */}
            {friends
              .filter((friend) => friend.name !== profile?.displayName) // ÎÇò ÏûêÏã† Ï†úÏô∏
              .map((friend) => (
                <div
                  key={friend.id}
                  className="flex items-center gap-3 p-3 bg-slate-700/50 rounded-xl hover:bg-slate-700/70 transition-all border border-slate-600/30"
                >
                  {/* ÏπúÍµ¨ ÏïÑÎ∞îÌÉÄ */}
                  <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-red-500 rounded-full flex items-center justify-center text-xl border-2 border-orange-400/30 shadow-lg">
                    {friend.avatar}
                  </div>

                  {/* ÏπúÍµ¨ Ï†ïÎ≥¥ */}
                  <div className="flex-1">
                    <div className="font-medium text-white">{friend.name}</div>
                    <div className="text-sm text-gray-300">{friend.description}</div>
                  </div>

                  {/* Î∞©Î¨∏ Î≤ÑÌäºÎßå ÌëúÏãú */}
                  <button className="bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white px-4 py-2 rounded-full text-sm font-medium transition-all shadow-lg hover:shadow-xl">
                    Î∞©Î¨∏
                  </button>
                </div>
              ))}
          </div>

          {/* Îçî ÎßéÏùÄ ÏπúÍµ¨ Ï¥àÎåÄ Î≤ÑÌäº */}
          <button 
            onClick={handleInviteFriends}
            disabled={isLoadingFriends}
            className={`w-full mt-4 py-3 rounded-xl font-medium transition-all shadow-lg hover:shadow-xl ${
              isLoadingFriends 
                ? "bg-slate-800 text-gray-400 cursor-not-allowed"
                : "bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white"
            }`}
          >
            {isLoadingFriends ? (
              <span className="flex items-center justify-center gap-2">
                <div className="animate-spin w-4 h-4 border-2 border-white/30 border-t-white rounded-full"></div>
                Ï¥àÎåÄ Ï§ë...
              </span>
            ) : (
              <span className="flex items-center justify-center gap-2">
                <span className="text-lg">üöÄ</span> ÏπúÍµ¨ Ï¥àÎåÄÌïòÍ∏∞
              </span>
            )}
          </button>


        </div>
        </StaticUI>
      </div>

      {/* NFT ÏÉÅÏÑ∏ Î™®Îã¨ */}
      {showNFTModal && selectedNFT && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black/70 backdrop-blur-sm">
            <div className="bg-slate-800 rounded-2xl p-6 m-4 max-w-md w-full border border-slate-600 max-h-[80vh] overflow-y-auto relative">
              {/* Îã´Í∏∞ Î≤ÑÌäº */}
              <button 
                onClick={() => setShowNFTModal(false)}
                className="absolute top-4 right-4 text-gray-400 hover:text-white text-xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-gray-600 transition-colors"
              >
                ‚úï
              </button>

              <div className="text-center">
                {/* NFT Ï†úÎ™© */}
                <div className="flex items-center justify-center gap-2 mb-4">
                  <span className="text-3xl">{selectedNFT.emoji}</span>
                  <h3 className="text-xl font-bold text-white">{selectedNFT.name} ÌÉêÌóò Í∏∞Î°ù</h3>
                </div>

                {/* Ìò∏ÏãúÌÉÄÎàÑ Ïù¥ÎØ∏ÏßÄ */}
                <div className="mb-6">
                  <img 
                    src={selectedNFT.image}
                    alt={`${selectedNFT.name}ÏóêÏÑúÏùò Ìò∏ÏãúÌÉÄÎàÑ`}
                    className="w-48 h-48 mx-auto rounded-2xl object-cover border-4 border-purple-500/30 shadow-lg"
                  />
                </div>

                {/* NFT Îì±Í∏â */}
                <div className={`inline-block px-3 py-1 rounded-full text-sm font-medium mb-4 ${
                  selectedNFT.rarity === 'Ìù¨Í∑Ä NFT' 
                    ? 'bg-orange-600/80 text-orange-100' 
                    : 'bg-gray-600/80 text-gray-100'
                }`}>
                  {selectedNFT.rarity}
                </div>

                {/* Ìò∏ÏãúÌÉÄÎàÑÏùò Í≤ΩÌóòÎã¥ */}
                <div className="bg-slate-700/50 rounded-xl p-4 mb-6 border border-slate-600/30">
                  <div className="flex items-center gap-2 mb-3">
                    <div className="w-8 h-8 rounded-full overflow-hidden bg-gradient-to-br from-purple-400 to-blue-500 p-1">
                      <img 
                        src="/images/hoshitanu.png" 
                        alt="Ìò∏ÏãúÌÉÄÎàÑ" 
                        className="w-full h-full rounded-full object-cover"
                      />
                    </div>
                    <span className="text-sm font-medium text-purple-300">Ìò∏ÏãúÌÉÄÎàÑÏùò Í≤ΩÌóòÎã¥</span>
                  </div>
                  <p className="text-sm text-gray-300 leading-relaxed text-left">
                    &quot;{selectedNFT.story}&quot;
                  </p>
                </div>

                {/* ÏπúÍµ¨ÏóêÍ≤å ÏûêÎûëÌïòÍ∏∞ Î≤ÑÌäº */}
                <button
                  onClick={handleShareNFT}
                  className="w-full bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 text-white font-medium py-3 px-6 rounded-xl transition-all shadow-lg"
                >
                  ÏπúÍµ¨ÏóêÍ≤å ÏûêÎûëÌïòÍ∏∞ üöÄ
                </button>
              </div>
            </div>
          </div>
        )}
    </div>
  );
}